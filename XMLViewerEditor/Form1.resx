<?xml version="1.0" encoding="utf-8"?>
<root>
  <!--
    Microsoft ResX Schema

    Version 2.0

    The primary goals of this format is to allow a simple XML format
    that is mostly human readable. The generation and parsing of the
    various data types are done through the TypeConverter classes
    associated with the data types.

    Example:

    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>

    There are any number of "resheader" rows that contain simple
    name/value pairs.

    Each data row contains a name, and value. The row also contains a
    type or mimetype. Type corresponds to a .NET class that support
    text/value conversion through the TypeConverter architecture.
    Classes that don't support this are serialized and stored with the
    mimetype set.

    The mimetype is used for serialized objects, and tells the
    ResXResourceReader how to depersist the object. This is currently not
    extensible. For a given mimetype the value must be set accordingly:

    Note - application/x-microsoft.net.object.binary.base64 is the format
    that the ResXResourceWriter will generate, however the reader can
    read any of the formats listed below.

    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="toolStrip.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>17, 17</value>
  </metadata>
  <metadata name="imageList.TrayLocation" type="System.Drawing.Point, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a">
    <value>135, 17</value>
  </metadata>
  <data name="imageList.ImageStream" mimetype="application/x-microsoft.net.object.binary.base64">
    <value>
        AAEAAAD/////AQAAAAAAAAAMAgAAAEZTeXN0ZW0uV2luZG93cy5Gb3JtcywgQ3VsdHVyZT1uZXV0cmFs
        LCBQdWJsaWNLZXlUb2tlbj1iNzdhNWM1NjE5MzRlMDg5BQEAAAAmU3lzdGVtLldpbmRvd3MuRm9ybXMu
        SW1hZ2VMaXN0U3RyZWFtZXIBAAAABERhdGEHAgIAAAAJAwAAAA8DAAAA3ggAAAJNU0Z0AUkBTAIBAQIB
        AAEIAQABCAEAARABAAEQAQAE/wEhAQAI/wFCAU0BNgcAATYDAAEoAwABQAMAARADAAEBAQABIAYAARAa
        AAMxAaIDIQExAyEBMQMhATEDIQExAyEBMQMhATEDIQExAyEBMQMhATEDIQExAzIBYQMnAT3MAAMvAaoo
        AAMnAT0DLQFQBAADBgEHAR0BIQEiASgBHQEhASIBKAEdASEBIgEoAR0BIQEiASgBHQEhASIBKAEdASEB
        IgEoAR0BIQEiASgBHQEhASIBKAEdASEBIgEoAR0BIQEiASgBHQEhASIBKAEcAR8BIAEmAQYCBwEIkAAD
        LwGqGAADCwEOAzQBbQM0AXIDKQFEAycBPQMtAVAEAAE4AYgBrQG9ATYBvAHwAfMBNgG8AfAB8wE2AbwB
        8AHzATYBvAHwAfMBNgG8AfAB8wE2AbwB8AHzATYBvAHwAfMBNgG8AfAB8wE2AbwB8AHzATYBvAHwAfMB
        NgG8AfAB8wE2AbsB8AHzAUUBggGaAaWQAAMvAaoDAgEDAxUBHQMVAR0DFQEdAxUBHQMVAR0DFQEdAxYB
        HwMWAR8DCgENAycBPQMtAVAEAAEwAYoBtQHKAS8BwgH+Af8BMQHEAv8BMQHEAv8BMQHEAv8BMQHEAv8B
        MQHEAv8BMQHEAv8BMQHEAv8BMQHEAv8BMQHEAv8BMQHEAv8BMQHEAv8BOQG2AekB7QEgASUBJwEtjAAD
        LwGqAwwBDwM0AYwDMwGaAzQBcwM0AXMDNAFzAzQBcwM0AZQDMwGaAywBTQMnAT0DLQFQBAABLgGIAbUB
        ygE8Ab8B+QH/ATEBxAL/ATEBxAL/ATEBxAL/ATEBxAL/ATEBxAL/ATEBxAL/ATEBxAL/ATEBxAL/ATEB
        xAL/ATEBxAL/ATEBxAL/ATMBwgH8Af0BRQF7AY8BmowAAy8BqgMCAQMDFwEgAxcBIAMXASADFwEgAxwB
        KAMGAQcDFgEfAxgBIQMRARYDJwE9Ay0BUAQAAS4BiAG1AcoBUwHAAfMB/wE5AcYC/wExAcQC/wExAcQC
        /wExAcQC/wExAcQC/wExAcQC/wExAcQC/wExAcQC/wExAcQC/wExAcQC/wExAcQC/wExAcQC/wE6AbMB
        4QHmAQoCCwENiAADLwGqAwkBCwMyAWIDMgFiAzIBYgMyAWIDMgFlAw8BFAMxAV8DMgFjAyQBOAMnAT0D
        LQFQBAABLgGIAbUBygFkAcUB8gH/AWUB0wL/ATEBxAL/ATEBxAL/ATEBxAL/ATEBxAL/ATEBxAL/ATEB
        xAL/ATEBxAL/ATEBxAL/ATEBxAL/ATEBxAL/ATEBxAL/ATEBwgH6AfwBQwFuAX8BiogAAy8BqigAAycB
        PQMtAVAEAAEuAYgBtQHKAWYBxQHyAf8BxgHwAv8BNwHGAv8BMQHEAv8BMQHEAv8BMQHEAv8BMQHEAv8B
        MQHEAv8BMQHEAv8BMQHEAv8BMQHEAv8BMQHEAv8BMQHEAv8BMQHEAv8BPAGtAdsB4IgAAy8BqgMIAQoD
        KwFJAywBSwMsAUsDLAFKAysBSAMsAUsDLAFLAywBSwMeASwDJwE9Ay0BUAQAAS4BiAG1AcoBZgHFAfIB
        /wHrAfsC/wGRAeAC/wFWAc8C/wFWAc8C/wFWAc8C/wFWAc8C/wFWAc8C/wFWAc8C/wFWAc8C/wFMAcsB
        /gH/ATUBvgH4Af0BPAGpAdYB3QE/AaIBygHRAUMBlgG4AcCIAAMvAaoDBAEFAx4BLAMeASwDFQEcAwsB
        DgMeASwDHgEsAx4BLAMeASwDDwETAycBPQMtAVAEAAEuAYgBtQHKAWYBxQHyAf8B7wH8Av8B9QH9Av8B
        8gH8Av8B8gH8Av8B8gH8Av8B8gH8Av8B8gH8Av8B8gH8Av8B8gH8Av8B7AH6Af4B/wFdAb8B8AH/AToB
        YwF2AYgBBgIHAQgDBgEHiAADLwGqAwkBCwMuAVIDLgFSAyUBOgMhATEDMwFqAy4BUgMuAVIDMgFkAyQB
        NwMnAT0DLQFQBAABLgGIAbUBygFiAcQB8gH/AdwB9gL/AecB+gL/AecB+gL/AecB+gL/AecB+gL/AecB
        +gL/AecB+gL/AecB+gL/AecB+gL/AcEB6QH6Af8BLgGsAesB/wE6AWABcwGFkAADLwGqBAEDBwEJAwcB
        CQMHAQkDBgEIFAADJwE9Ay0BUAQAATIBgAGmAbwBIAGnAekB/wFYAcAB8QH/AVwBwQHxAf8BXAHBAfEB
        /wFcAcEB8QH/AVwBwQHxAf8BXAHBAfEB/wFcAcEB8QH/AVwBwQHxAf8BWwHAAfEB/wEsAawB6wH/ARUB
        oQHlAf0BOQFYAWcBd5AAAy8BqgMPARMDNAGSAzQBkgMzAZcDNAGKCAADJgE8AzMBmgMyAZkDJgHCAxgB
        IgQAARoBHQEeASQBOQFaAWsBewEXAZ8B4gH6ARMBoQHoAf8BEwGhAegB/wETAaEB6AH/ARQBnwHmAf4B
        LgGHAbUBygEpATIBNgFAASkBMgE2AUABKQEyATYBQAEpATIBNgFAASgBMAE0AT0BDAINARCQAAMvAaoc
        AAMyAWUDHgEsAzIBYAMoAUIMAAEMAg0BEAE0AX4BogG3AS4BiAG1AcoBLgGIAbUBygEuAYgBtQHKATUB
        fAGgAbUBGwEdAR8BJagAAy8BqgMGAQcDBgEHAwYBBwMGAQcDBgEHAwYBBwMGAQcDMwFnAzQBjAMqAUXU
        AAM1AYADLwGrAy8BrAMuAa4DLQGvAy0BrwMtAa8DLQGvAysBtgMqAUbQAAFCAU0BPgcAAT4DAAEoAwAB
        QAMAARADAAEBAQABAQUAAYAXAAP/AQABwAEBAv8EAAHfAfkBAAEDBAAB3wGBAQABAwQAAcABAQEAAQEE
        AAHAAQEBAAEBBAABwAEBBgABwAEBBgAB3wH5BgABwAEBBgABwAEBBgABwAEBAQABAwQAAcAB+QEAAQME
        AAHAAcEBAAEDBAAB3wHDAYAB/wQAAcABBwL/BAABwAEPAv8EAAs=
</value>
  </data>
</root>